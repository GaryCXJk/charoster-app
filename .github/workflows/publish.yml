name: Build and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Version guard (ensure tag matches package.json)
        run: |
          if [ "${GITHUB_REF}" = "" ] || [[ ! "${GITHUB_REF}" =~ refs/tags/ ]]; then
            echo "::error::Version guard ran without a tag ref (unexpected)."; exit 1;
          fi
          if [ ! -f package.json ]; then echo "::error::package.json missing"; exit 1; fi
          PKG_VERSION=$(node -p "require('./package.json').version") || { echo "::error::Failed to read version from package.json"; exit 1; }
          TAG=${GITHUB_REF#refs/tags/}
          TAG_VERSION=${TAG#v}
          echo "Tag ref:        ${GITHUB_REF}"
          echo "Tag name:       ${TAG}"
          echo "Tag version:    ${TAG_VERSION}"
          echo "package.json:   ${PKG_VERSION}"
          if [ "${PKG_VERSION}" != "${TAG_VERSION}" ]; then
            echo "::error::Version mismatch: package.json=${PKG_VERSION} tag=${TAG_VERSION}"; exit 1;
          fi
          if [[ "${TAG_VERSION}" == *-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_ENV
          else
            echo "is_prerelease=false" >> $GITHUB_ENV
          fi

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Package (make)
        run: yarn make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish (GitHub Release)
        # Restrict publishing to tag pushes only; prevents accidental release attempts on main merges.
        if: startsWith(github.ref, 'refs/tags/')
        # Run electron-forge publish; no explicit --target needed because publishers are defined in forge.config.js
        run: yarn run publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (dist)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: forge-out-${{ matrix.os }}
          path: out/
          if-no-files-found: warn

  promote-release:
    name: Promote Release (stable / rc)
    needs: build-and-publish
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Set tag vars
        id: classify
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          BASE_VERSION=${TAG#v}
          RELEASE_TYPE="prerelease-draft"
          PROMOTE="false"
          FINAL_PRERELEASE="false"
          if [[ "$BASE_VERSION" == *-rc.* ]]; then
            RELEASE_TYPE="rc"
            PROMOTE="true"
            FINAL_PRERELEASE="true"
          elif [[ "$BASE_VERSION" != *-* ]]; then
            RELEASE_TYPE="stable"
            PROMOTE="true"
            FINAL_PRERELEASE="false"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "PROMOTE=$PROMOTE" >> $GITHUB_ENV
          echo "FINAL_PRERELEASE=$FINAL_PRERELEASE" >> $GITHUB_ENV
          echo "promote=$PROMOTE" >> $GITHUB_OUTPUT
          echo "final_prerelease=$FINAL_PRERELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Inspect release state
        run: |
          echo "Tag: $TAG"; echo "Base version: $BASE_VERSION";
          echo "PROMOTE=$PROMOTE"; echo "FINAL_PRERELEASE=$FINAL_PRERELEASE"; echo "RELEASE_TYPE=$RELEASE_TYPE";

      - name: Checkout (for changelog)
        if: ${{ steps.classify.outputs.promote == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract changelog section
        if: ${{ steps.classify.outputs.promote == 'true' }}
        id: changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then echo "changelog_missing=true" >> $GITHUB_OUTPUT; exit 0; fi
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          # Extract lines between the version header and next version header / EOF
          awk -v ver="$VERSION" 'BEGIN{IGNORECASE=0} /^## \[/ { if (found && $0 !~ ver) exit } { if ($0 ~ "^## \[" ver "\\]") found=1; if(found) print }' CHANGELOG.md > _section.txt || true
          if [ ! -s _section.txt ]; then echo "changelog_empty=true" >> $GITHUB_OUTPUT; else echo "changelog_empty=false" >> $GITHUB_OUTPUT; fi
          echo '--- Extracted Section ---'
          cat _section.txt || true
          echo '------------------------'
          SECTION=$(sed "s/'/'"'"'"'"/g" _section.txt | tr '\n' '\r' )
          echo "section_present=true" >> $GITHUB_OUTPUT
          # We won't pass huge body as output (GitHub size limit), instead keep file for next step.

      - name: Promote GitHub release
        if: ${{ steps.classify.outputs.promote == 'true' }}
        run: |
          # gh CLI is available on ubuntu-latest; if not, we could install it.
          if ! command -v gh >/dev/null 2>&1; then
            echo "Installing gh CLI";
            sudo apt-get update -y && sudo apt-get install -y gh;
          fi
          FLAGS="--draft=false"
          if [ "$FINAL_PRERELEASE" = "true" ]; then
            FLAGS="$FLAGS --prerelease=true"
          else
            FLAGS="$FLAGS --prerelease=false"
          fi
          echo "Promoting release $TAG with flags: $FLAGS"
          gh release edit "$TAG" $FLAGS
          if [ -f _section.txt ] && [ -s _section.txt ]; then
            echo "Appending changelog section to release notes"
            # Fetch existing notes
            EXISTING=$(gh release view "$TAG" --json body -q .body || echo "")
            printf '%s\n\n%s\n' "$EXISTING" "$(cat _section.txt)" > _new_notes.txt
            gh release edit "$TAG" --notes-file _new_notes.txt
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Leave as draft (no promotion for beta/alpha)
        if: ${{ steps.classify.outputs.promote != 'true' }}
        run: |
          echo "Leaving release $TAG as draft (type: $RELEASE_TYPE)."
